{"version":3,"sources":["Header.tsx","Condition.tsx","utils.ts","Lab.tsx","Recommend.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Navbar","bg","expand","Brand","href","Toggle","Collapse","id","Nav","className","Link","Condition","startBacktest","useState","selectedStock","setSelectedStock","customStock","setCustomStock","startDate","setStartDate","money","setMoney","totalDays","setTotalDays","firstBuyingPriceType","setFirstBuyingPriceType","orderType","priceType","rate","buying1Condition","setBuying1Condition","buying2Condition","setBuying2Condition","sellingCondition","setSellingCondition","minDateList","TECL","FAS","RETL","DPST","DUSL","NAIL","LABU","TQQQ","FNGU","BNKU","UPRO","TPOR","DFEN","WEBL","TNA","MIDU","HIBL","WANT","SOXL","CUSTOM","minDate","useMemo","maxDate","moment","add","format","onChangeBuying1Condition","key","e","value","target","onChangeBuying2Condition","onChangeSellingCondition","plusMoney","Row","Col","md","lg","Form","Group","controlId","Label","Control","as","onChange","newValue","map","type","readOnly","min","Math","max","ButtonGroup","size","Button","variant","onClick","stock","trim","disabled","utils","intComma","str","toString","reg","test","replace","Lab","data","setData","loding","setLoding","testParams","a","Number","axios","get","params","buying1OrderType","buying1PriceType","buying1Rate","buying2OrderType","buying2PriceType","buying2Rate","sellingOrderType","sellingPriceType","sellingRate","res","status","console","log","alert","response","message","Spinner","animation","Table","buying_info","days","date","close","buying_count","buying_price","toFixed","avg_price","total_count","evaluated_price","total_price","profits","classNames","profits_rate","sort","b","total_money_profits_rate","sell_info","sell_unit_price","sell_count","Recommend","App","path","exact","to","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a55167.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport \"./Header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"md\">\r\n      <Navbar.Brand href=\"#lab\">무한매수법 백테스트</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#lab\">연구소</Nav.Link>\r\n          {/*<Nav.Link href=\"#recommend\">종목추천</Nav.Link>*/}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import moment from \"moment\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { Button, ButtonGroup, Col, Form, Row } from \"react-bootstrap\";\r\nimport \"./Condition.scss\";\r\nimport { IBBuyingSellingCondition } from \"./interfaces\";\r\n\r\ninterface Props {\r\n  startBacktest: Function;\r\n}\r\n\r\n/**\r\n * 조건\r\n */\r\nconst Condition = ({ startBacktest }: Props) => {\r\n  const [selectedStock, setSelectedStock] = useState<string>(\"TQQQ\");\r\n  const [customStock, setCustomStock] = useState<string>(\"\");\r\n  const [startDate, setStartDate] = useState<string>(\"2021-01-01\");\r\n  const [money, setMoney] = useState<number>(10000);\r\n  const [totalDays, setTotalDays] = useState<number>(40);\r\n  const [firstBuyingPriceType, setFirstBuyingPriceType] =\r\n    useState<string>(\"close\");\r\n  const [buying1Condition, setBuying1Condition] =\r\n    useState<IBBuyingSellingCondition>({\r\n      orderType: \"loc\",\r\n      priceType: \"avgPrice\",\r\n      rate: 0\r\n    });\r\n  const [buying2Condition, setBuying2Condition] =\r\n    useState<IBBuyingSellingCondition>({\r\n      orderType: \"loc\",\r\n      priceType: \"avgPrice\",\r\n      rate: 15\r\n    });\r\n  const [sellingCondition, setSellingCondition] =\r\n    useState<IBBuyingSellingCondition>({\r\n      orderType: \"limitOrder\",\r\n      priceType: \"avgPrice\",\r\n      rate: 10\r\n    });\r\n\r\n  const minMoney = 10000;\r\n\r\n  const stockList: string[][] = [\r\n    [\"TECL\", \"TECL\"],\r\n    [\"FAS\", \"FAS\"],\r\n    [\"RETL\", \"RETL\"],\r\n    [\"DPST\", \"DPST\"],\r\n    [\"DUSL\", \"DUSL\"],\r\n    [\"NAIL\", \"NAIL\"],\r\n    [\"LABU\", \"LABU\"],\r\n    [\"TQQQ\", \"TQQQ\"],\r\n    [\"FNGU\", \"FNGU\"],\r\n    [\"BNKU\", \"BNKU\"],\r\n    [\"UPRO\", \"UPRO\"],\r\n    [\"TPOR\", \"TPOR\"],\r\n    [\"DFEN\", \"DFEN\"],\r\n    [\"WEBL\", \"WEBL\"],\r\n    [\"TNA\", \"TNA\"],\r\n    [\"MIDU\", \"MIDU\"],\r\n    [\"HIBL\", \"HIBL\"],\r\n    [\"WANT\", \"WANT\"],\r\n    [\"SOXL\", \"SOXL\"],\r\n    [\"직접선택\", \"CUSTOM\"]\r\n  ];\r\n\r\n  const minDateList: { [key: string]: string } = {\r\n    TECL: \"2008-12-18\",\r\n    FAS: \"2008-11-07\",\r\n    RETL: \"2010-07-15\",\r\n    DPST: \"2015-08-20\",\r\n    DUSL: \"2017-05-04\",\r\n    NAIL: \"2015-08-20\",\r\n    LABU: \"2015-05-29\",\r\n    TQQQ: \"2010-02-11\",\r\n    FNGU: \"2018-01-24\",\r\n    BNKU: \"2019-04-04\",\r\n    UPRO: \"2009-06-26\",\r\n    TPOR: \"2017-11-07\",\r\n    DFEN: \"2017-05-04\",\r\n    WEBL: \"2019-11-08\",\r\n    TNA: \"2008-11-06\",\r\n    MIDU: \"2009-01-09\",\r\n    HIBL: \"2019-11-08\",\r\n    WANT: \"2018-12-03\",\r\n    SOXL: \"2010-03-12\",\r\n    CUSTOM: \"2000-01-01\"\r\n  };\r\n\r\n  /**\r\n   * 현재 선택한 종목의 mindate\r\n   */\r\n  const minDate = useMemo((): string => {\r\n    return minDateList[selectedStock];\r\n  }, [selectedStock]);\r\n\r\n  const maxDate = moment().add(-1, \"d\").format(\"YYYY-MM-DD\");\r\n\r\n  /**\r\n   * 주식 종목 셀렉트 변경\r\n   */\r\n  const onChangeStock = (e: any) => {\r\n    const newValue: string = e.target.value;\r\n    // console.log(\"onChangeStock\", newValue);\r\n    setSelectedStock(newValue);\r\n\r\n    if (newValue !== \"CUSTOM\") {\r\n      setCustomStock(\"\");\r\n    }\r\n\r\n    // min 값 체크 하기\r\n    if (startDate < minDateList[newValue]) {\r\n      setStartDate(minDateList[newValue]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 직접 선택 텍스트 변경\r\n   */\r\n  const onChangeCustomStock = (e: any) => {\r\n    const newValue: string = e.target.value;\r\n    // console.log(\"onChangeCustomStock\", newValue);\r\n    setCustomStock(newValue);\r\n  };\r\n\r\n  /**\r\n   * 투자금 변경\r\n   */\r\n  const onChangeMoney = (e: any) => {\r\n    const newValue: number = Math.max(minMoney, e.target.value);\r\n    // console.log(\"onChangeMoney\", newValue);\r\n    setMoney(newValue);\r\n  };\r\n\r\n  const onChangeTotalDays = (e: any) => {\r\n    const newValue: number = Math.min(100, Math.max(1, e.target.value));\r\n    // console.log(\"onChangeTotalDays\", newValue);\r\n    setTotalDays(newValue);\r\n  };\r\n\r\n  /**\r\n   * 시작 날짜 변경\r\n   */\r\n  const onChangeStartDate = (e: any) => {\r\n    // console.log(\"onChangeStartDate\", e.target.value);\r\n    setStartDate(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * 첫날 매수 단가 셀렉트 변경\r\n   */\r\n  const onChangeFirstBuying = (e: any) => {\r\n    // console.log(\"onChangeFirstBuying\", e.target.value);\r\n    setFirstBuyingPriceType(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * 매수조건 1 변경\r\n   */\r\n  const onChangeBuying1Condition = (key: string, e: any) => {\r\n    const value: any = e.target.value;\r\n    setBuying1Condition({ ...buying1Condition, [key]: value });\r\n  };\r\n\r\n  /**\r\n   * 매수조건 2 변경\r\n   */\r\n  const onChangeBuying2Condition = (key: string, e: any) => {\r\n    const value: any = e.target.value;\r\n    setBuying2Condition({ ...buying2Condition, [key]: value });\r\n  };\r\n\r\n  /**\r\n   * 매도조건 변경\r\n   */\r\n  const onChangeSellingCondition = (key: string, e: any) => {\r\n    const value: any = e.target.value;\r\n    setSellingCondition({ ...sellingCondition, [key]: value });\r\n  };\r\n\r\n  const plusMoney = (value: number) => {\r\n    setMoney(money + value);\r\n  };\r\n\r\n  const resetMoney = () => {\r\n    setMoney(10000);\r\n  };\r\n\r\n  const onClickTestStart = () => {\r\n    // console.log(\"onClickTestStart\");\r\n    startBacktest({\r\n      stock: selectedStock !== \"CUSTOM\" ? selectedStock : customStock.trim(),\r\n      startDate: startDate,\r\n      money: money,\r\n      totalDays: totalDays,\r\n      firstBuyingPriceType: firstBuyingPriceType,\r\n      buying1Condition: buying1Condition,\r\n      buying2Condition: buying2Condition,\r\n      sellingCondition: sellingCondition\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"condition p-4\">\r\n      <Row>\r\n        <Col md={12} lg>\r\n          <Form.Group controlId=\"stock\">\r\n            <Form.Label>종목</Form.Label>\r\n            <Row>\r\n              <Col>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  onChange={onChangeStock}\r\n                  value={selectedStock}\r\n                >\r\n                  {stockList.map(e => (\r\n                    <option key={e[1]} value={e[1]}>\r\n                      {e[0]}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={customStock}\r\n                  onChange={onChangeCustomStock}\r\n                  readOnly={selectedStock !== \"CUSTOM\"}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Form.Group>\r\n\r\n          <Row>\r\n            <Col md={12} lg>\r\n              <Form.Group controlId=\"money\" className=\"mb-1\">\r\n                <Form.Label>\r\n                  투자금($) <small>(최소 $10,000)</small>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={money}\r\n                  min={minMoney}\r\n                  onChange={onChangeMoney}\r\n                />\r\n              </Form.Group>\r\n              <ButtonGroup size=\"sm\" className=\"mb-3 d-flex\">\r\n                <Button\r\n                  className=\"py-0\"\r\n                  variant=\"outline-secondary\"\r\n                  onClick={() => plusMoney(100000)}\r\n                >\r\n                  +100,000\r\n                </Button>\r\n                <Button\r\n                  className=\"py-0\"\r\n                  variant=\"outline-secondary\"\r\n                  onClick={() => plusMoney(10000)}\r\n                >\r\n                  +10,000\r\n                </Button>\r\n                <Button\r\n                  className=\"py-0\"\r\n                  variant=\"outline-secondary\"\r\n                  onClick={resetMoney}\r\n                >\r\n                  C\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Col>\r\n            <Col md={12} lg>\r\n              <Form.Group controlId=\"total-days\">\r\n                <Form.Label>\r\n                  분할 <small>(1 ~ 100)</small>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={totalDays}\r\n                  min=\"1\"\r\n                  max=\"100\"\r\n                  onChange={onChangeTotalDays}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Form.Group controlId=\"start-date\">\r\n            <Form.Label>시작일</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              value={startDate}\r\n              min={minDate}\r\n              max={maxDate}\r\n              onChange={onChangeStartDate}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"first-buying\">\r\n            <Form.Label>첫날 매수 단가</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              onChange={onChangeFirstBuying}\r\n              value={firstBuyingPriceType}\r\n            >\r\n              {/*<option value=\"open\">시작가</option>*/}\r\n              <option value=\"close\">종가</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Col>\r\n        <Col md={12} lg>\r\n          <h2>매수 조건 1</h2>\r\n          <div className=\"d-flex align-items-center mb-3\">\r\n            <Form.Group controlId=\"buying-1-ordertype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={buying1Condition.orderType}\r\n                onChange={e => onChangeBuying1Condition(\"orderType\", e)}\r\n              >\r\n                <option value=\"loc\">LOC</option>\r\n                {/*<option value=\"limitOrder\">보통가(지정가)</option>*/}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"buying-1-pricetype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={buying1Condition.priceType}\r\n                onChange={e => onChangeBuying1Condition(\"priceType\", e)}\r\n              >\r\n                <option value=\"avgPrice\">평단가</option>\r\n                {/*<option value=\"yesterdayClose\">전날 종가</option>*/}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"buying-1-rate\" className=\"mb-0\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={buying1Condition.rate}\r\n                onChange={e => onChangeBuying1Condition(\"rate\", e)}\r\n              />\r\n            </Form.Group>\r\n            <span>%</span>\r\n          </div>\r\n\r\n          <h2>매수 조건 2</h2>\r\n          <div className=\"d-flex align-items-center mb-3\">\r\n            <Form.Group controlId=\"buying-2-ordertype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={buying2Condition.orderType}\r\n                onChange={e => onChangeBuying2Condition(\"orderType\", e)}\r\n              >\r\n                <option value=\"loc\">LOC</option>\r\n                {/*<option value=\"limitOrder\">보통가(지정가)</option>*/}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"buying-2-pricetype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={buying2Condition.priceType}\r\n                onChange={e => onChangeBuying2Condition(\"priceType\", e)}\r\n              >\r\n                <option value=\"avgPrice\">평단가</option>\r\n                {/*<option value=\"yesterdayClose\">전날 종가</option>*/}\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"buying-2-rate\" className=\"mb-0\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={buying2Condition.rate}\r\n                onChange={e => onChangeBuying2Condition(\"rate\", e)}\r\n              />\r\n            </Form.Group>\r\n            <span>%</span>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <h2>매도 조건</h2>\r\n          <div className=\"d-flex align-items-center mb-3\">\r\n            <Form.Group controlId=\"selling-ordertype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={sellingCondition.orderType}\r\n                onChange={e => onChangeSellingCondition(\"orderType\", e)}\r\n              >\r\n                <option value=\"limitOrder\">보통가(지정가)</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"selling-pricetype\" className=\"mb-0 mr-1\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={sellingCondition.priceType}\r\n                onChange={e => onChangeSellingCondition(\"priceType\", e)}\r\n              >\r\n                <option value=\"avgPrice\">평단가</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"selling-rate\" className=\"mb-0\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={sellingCondition.rate}\r\n                onChange={e => onChangeSellingCondition(\"rate\", e)}\r\n              />\r\n            </Form.Group>\r\n            <span>%</span>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Button\r\n        onClick={onClickTestStart}\r\n        disabled={selectedStock === \"CUSTOM\" && customStock.trim() === \"\"}\r\n      >\r\n        테스트 시작\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Condition;\r\n","const utils = {\r\n  intComma(str: number | string): string {\r\n    if (typeof str == \"number\") {\r\n      str = str.toString();\r\n    }\r\n\r\n    const reg = /(^[+-]?\\d+)(\\d{3})/;\r\n    while (reg.test(str)) str = str.replace(reg, \"$1\" + \",\" + \"$2\");\r\n    return str;\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","import axios from \"axios\";\r\nimport classNames from \"classnames\";\r\nimport React, { useState } from \"react\";\r\nimport { Spinner, Table } from \"react-bootstrap\";\r\nimport Condition from \"./Condition\";\r\nimport { IBResponseData, IBTestParams } from \"./interfaces\";\r\nimport \"./Lab.scss\";\r\nimport utils from \"./utils\";\r\n\r\n/**\r\n * 연구소\r\n */\r\nconst Lab = () => {\r\n  const [data, setData] = useState<IBResponseData | null>(null);\r\n  const [loding, setLoding] = useState<boolean>(false);\r\n\r\n  const startBacktest = async (testParams: IBTestParams) => {\r\n    testParams.buying1Condition.rate = Number(testParams.buying1Condition.rate);\r\n    testParams.buying2Condition.rate = Number(testParams.buying2Condition.rate);\r\n    testParams.sellingCondition.rate = Number(testParams.sellingCondition.rate);\r\n    // console.log(testParams);\r\n\r\n    setLoding(true);\r\n    setData(null);\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        \"https://54o7jbyvz3.execute-api.ap-northeast-2.amazonaws.com/default/infinitebuying\",\r\n        {\r\n          params: {\r\n            stock: testParams.stock,\r\n            startDate: testParams.startDate,\r\n            money: testParams.money,\r\n            totalDays: testParams.totalDays,\r\n            firstBuyingPriceType: testParams.firstBuyingPriceType,\r\n            buying1OrderType: testParams.buying1Condition.orderType,\r\n            buying1PriceType: testParams.buying1Condition.priceType,\r\n            buying1Rate: testParams.buying1Condition.rate,\r\n            buying2OrderType: testParams.buying2Condition.orderType,\r\n            buying2PriceType: testParams.buying2Condition.priceType,\r\n            buying2Rate: testParams.buying2Condition.rate,\r\n            sellingOrderType: testParams.sellingCondition.orderType,\r\n            sellingPriceType: testParams.sellingCondition.priceType,\r\n            sellingRate: testParams.sellingCondition.rate\r\n          }\r\n        }\r\n      );\r\n\r\n      if (res.status === 200) {\r\n        setData(res.data);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      alert(err.response.data.message);\r\n    } finally {\r\n      setLoding(false);\r\n    }\r\n  };\r\n\r\n  const isMaximumLoss = (profits_rate: number) => {\r\n    if (data) {\r\n      const maximumLoss = data.buying_info\r\n        .map(e => e.profits_rate)\r\n        .sort((a, b) => a - b)[0];\r\n\r\n      return maximumLoss === profits_rate;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n      <Condition startBacktest={startBacktest} />\r\n\r\n      {loding && (\r\n        <div className=\"mt-5\">\r\n          <Spinner animation=\"border\" />\r\n        </div>\r\n      )}\r\n\r\n      {data !== null && (\r\n        <Table className=\"mt-5\">\r\n          <thead>\r\n            <tr>\r\n              <th>일차</th>\r\n              <th>날짜</th>\r\n              <th>\r\n                종가\r\n                <br />\r\n                (매수단가)\r\n              </th>\r\n              <th>매수개수</th>\r\n              <th>매수금</th>\r\n              <th>평단가</th>\r\n              <th>보유개수</th>\r\n              <th>평가금</th>\r\n              <th>총매수금</th>\r\n              <th>수익금</th>\r\n              <th>수익률</th>\r\n              <th>원금대비수익률</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.buying_info.map(e => (\r\n              <tr key={e.days}>\r\n                <td>{e.days}일</td>\r\n                <td>{e.date}</td>\r\n                <td>{utils.intComma(e.close)}</td>\r\n                <td>{utils.intComma(e.buying_count)}</td>\r\n                <td>{utils.intComma(e.buying_price.toFixed(2))}</td>\r\n                <td>{utils.intComma(e.avg_price.toFixed(2))}</td>\r\n                <td>{utils.intComma(e.total_count)}</td>\r\n                <td>{utils.intComma(e.evaluated_price.toFixed(2))}</td>\r\n                <td>{utils.intComma(e.total_price.toFixed(2))}</td>\r\n                <td>{utils.intComma(e.profits.toFixed(2))}</td>\r\n                <td\r\n                  className={classNames({\r\n                    \"table-danger\": isMaximumLoss(e.profits_rate)\r\n                  })}\r\n                >\r\n                  {(e.profits_rate * 100).toFixed(2)}%\r\n                </td>\r\n                <td>{(e.total_money_profits_rate * 100).toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n          {data.sell_info !== null && (\r\n            <thead>\r\n              <tr>\r\n                <th>일차</th>\r\n                <th>날짜</th>\r\n                <th>종가</th>\r\n                <th></th>\r\n                <th></th>\r\n                <th>매도가</th>\r\n                <th>매도개수</th>\r\n                <th>매도금</th>\r\n                <th>\r\n                  매도시점\r\n                  <br />\r\n                  총매수금\r\n                </th>\r\n                <th>수익금</th>\r\n                <th>수익률</th>\r\n                <th>원금대비수익률</th>\r\n              </tr>\r\n            </thead>\r\n          )}\r\n          {data.sell_info !== null && (\r\n            <tbody className=\"sell\">\r\n              <tr>\r\n                <td>{data.sell_info.days}일</td>\r\n                <td>{data.sell_info.date}</td>\r\n                <td>{utils.intComma(data.sell_info.close)}</td>\r\n                <td></td>\r\n                <td></td>\r\n                <td>\r\n                  {utils.intComma(data.sell_info.sell_unit_price.toFixed(2))}\r\n                </td>\r\n                <td>{utils.intComma(data.sell_info.sell_count)}</td>\r\n                <td>\r\n                  {utils.intComma(data.sell_info.evaluated_price.toFixed(2))}\r\n                </td>\r\n                <td>{utils.intComma(data.sell_info.total_price.toFixed(2))}</td>\r\n                <td>{utils.intComma(data.sell_info.profits.toFixed(2))}</td>\r\n                <td>{(data.sell_info.profits_rate * 100).toFixed(2)}%</td>\r\n                <td>\r\n                  {(data.sell_info.total_money_profits_rate * 100).toFixed(2)}%\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          )}\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lab;\r\n","import React from \"react\";\r\n\r\n/**\r\n * 종목 추천\r\n */\r\nconst Recommend = () => {\r\n  return <div className=\"mt-3\">종목 추천</div>;\r\n};\r\n\r\nexport default Recommend;\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { HashRouter, Redirect, Route } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\nimport Header from \"./Header\";\r\nimport Lab from \"./Lab\";\r\nimport Recommend from \"./Recommend\";\r\n\r\nfunction App() {\r\n  const isMobile = false;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={classNames(isMobile ? \"mobile-container\" : \"container\")}>\r\n        <Header />\r\n        <HashRouter>\r\n          <Route path=\"/\" exact>\r\n            <Redirect to=\"/lab\" />\r\n          </Route>\r\n          <Route path=\"/lab\" component={Lab} />\r\n          <Route path=\"/recommend\" component={Recommend} />\r\n        </HashRouter>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}